{
  "address": "0xb6B929b3c46069b45F8d1315d22D0C22a1C493A5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chosenNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "ChooseAndStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "END_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERVAL_NUMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "INTERVAL_WEIGHTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_POOL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_SHARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNDERLYING_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "chooseNumberAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IGuessGameFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserChosenNumber",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserOperationHistories",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "day",
              "type": "uint256"
            }
          ],
          "internalType": "struct GuessGame.Operation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval_nums",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "setIntervalWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userChosenNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userOperationHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userStakedAmountPerNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userStakedSharePerNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9caf5b68c42b8e75faa495fad15043521cae9919b5274822c9008a1cc7cb6daa",
  "receipt": {
    "to": null,
    "from": "0x0502A4B6d4732564F6861a931d33544D7914C272",
    "contractAddress": "0xb6B929b3c46069b45F8d1315d22D0C22a1C493A5",
    "transactionIndex": 38,
    "gasUsed": "1088996",
    "logsBloom": "0x
    "blockHash": "0xa1b940de47d45037d3e9cdf3c64c009417249c31b8cbf970a3bb9aa3fe5d5802",
    "transactionHash": "0x9caf5b68c42b8e75faa495fad15043521cae9919b5274822c9008a1cc7cb6daa",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 4834753,
        "transactionHash": "0x9caf5b68c42b8e75faa495fad15043521cae9919b5274822c9008a1cc7cb6daa",
        "address": "0xb6B929b3c46069b45F8d1315d22D0C22a1C493A5",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 34,
        "blockHash": "0xa1b940de47d45037d3e9cdf3c64c009417249c31b8cbf970a3bb9aa3fe5d5802"
      }
    ],
    "blockNumber": 4834753,
    "cumulativeGasUsed": "6435689",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e7e932e7c529e8d31f0ba33beb4cd5af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chosenNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"ChooseAndStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"END_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERVAL_NUMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"INTERVAL_WEIGHTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"chooseNumberAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IGuessGameFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserChosenNumber\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserOperationHistories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"internalType\":\"struct GuessGame.Operation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval_nums\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"setIntervalWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userChosenNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userOperationHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakedAmountPerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakedSharePerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GuessGame.sol\":\"GuessGame\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/GuessGame.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IGuessGame.sol\\\";\\nimport \\\"./interfaces/IGuessGameFactory.sol\\\";\\n\\ncontract GuessGame is Initializable, ReentrancyGuardUpgradeable, IGuessGame {\\n    using Strings for uint256;\\n\\n    IGuessGameFactory public factory;\\n\\n    struct Operation {\\n        uint256 number;\\n        uint256 timestamp;\\n        uint256 amount;\\n        uint256 shares;\\n        uint256 day;\\n    }\\n\\n    address public TOKEN_ADDRESS;\\n    IERC20 public UNDERLYING_TOKEN;\\n    uint256 public START_TIME;\\n    uint256 public END_TIME;\\n    uint256 public INTERVAL;\\n    uint256 public INTERVAL_NUMS;\\n    uint256 public TOTAL_SHARE;\\n    uint256[] public INTERVAL_WEIGHTS;\\n    uint256 public REWARD_POOL;\\n    // uint256 public \\n    mapping(address => Operation[]) public userOperationHistory;\\n    mapping(address => mapping(uint256 => uint256)) public userStakedAmountPerNumber;\\n    mapping(address => mapping(uint256 => uint256)) public userStakedSharePerNumber;\\n    mapping(address => uint256[]) public userChosenNumbers;\\n    \\n\\n    event ChooseAndStake(address staker, uint256 chosenNumber, uint256 amount, uint256 day, uint256 shares);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == address(factory), \\\"GuessGame: UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function setIntervalWeight(uint256[] memory weights) external onlyFactory {\\n        require(weights.length == INTERVAL_NUMS, \\\"GuessGame: INVALID_WEIGHTS_LENGTH\\\");\\n        INTERVAL_WEIGHTS = weights;\\n    }\\n\\n    function initialize(address _factory, address _tokenAddress, uint256 _startTime, uint256 _interval, uint256 _interval_nums) public initializer {\\n        __ReentrancyGuard_init();\\n        factory = IGuessGameFactory(_factory);\\n        START_TIME = _startTime;\\n        END_TIME = _startTime + _interval * _interval_nums;\\n        INTERVAL = _interval;\\n        INTERVAL_NUMS = _interval_nums;\\n        TOKEN_ADDRESS = _tokenAddress;\\n        UNDERLYING_TOKEN = IERC20(_tokenAddress);\\n        INTERVAL_WEIGHTS = [100];\\n    }\\n\\n    // _number from 1 to 1000, maxAmount = 100000 * 1e18\\n    function chooseNumberAndStake(uint256 _number, uint256 _tokenAmount) public {\\n        require(INTERVAL_WEIGHTS.length == INTERVAL_NUMS, \\\"GuessGame: please set interval weights first\\\");\\n        require(_tokenAmount > 0 && _tokenAmount <= 100000 * 1e18, \\\"GuessGame: INVALID_TOKEN_AMOUNT\\\");\\n        require(userChosenNumbers[msg.sender].length < 3, \\\"GuessGame: EXCEED_MAX_STAKED_NUMBER\\\");\\n        require(block.timestamp >= START_TIME && block.timestamp <= END_TIME, \\\"GuessGame: NOT_IN_STAKING_TIME\\\");\\n        require(_number >= 1 && _number <= 1000, \\\"GuessGame: INVALID_NUMBER\\\");\\n        require(UNDERLYING_TOKEN.balanceOf(msg.sender) >= _tokenAmount, \\\"GuessGame: INSUFFICIENT_BALANCE\\\");\\n\\n        UNDERLYING_TOKEN.transferFrom(msg.sender, address(this), _tokenAmount);\\n        uint256 day = (block.timestamp - START_TIME) / INTERVAL;\\n        uint256 shares = _tokenAmount * INTERVAL_WEIGHTS[day];\\n        TOTAL_SHARE += shares;\\n        REWARD_POOL += _tokenAmount;\\n        userOperationHistory[msg.sender].push(Operation({\\n            number: _number,\\n            timestamp: block.timestamp,\\n            amount: _tokenAmount,\\n            shares: shares,\\n            day: day\\n        }));\\n        userStakedAmountPerNumber[msg.sender][_number] += _tokenAmount;\\n        userStakedSharePerNumber[msg.sender][_number] += shares;\\n        userChosenNumbers[msg.sender].push(_number);\\n        emit ChooseAndStake(msg.sender, _number,  _tokenAmount, day, shares);\\n    }\\n\\n    function withdraw(uint256 _number) external onlyFactory {\\n        require(block.timestamp > END_TIME, \\\"GuessGame: NOT_IN_WITHDRAW_TIME\\\");\\n        \\n        UNDERLYING_TOKEN.transfer(msg.sender, _number);\\n        REWARD_POOL -= _number;\\n    }\\n\\n    function getUserOperationHistories(address _user) public view returns (Operation[] memory) {\\n        Operation[] memory operations = userOperationHistory[_user];\\n\\n        return operations;\\n    }\\n\\n    function getUserChosenNumber(address _user) public view returns (uint256[] memory) {\\n        return userChosenNumbers[_user];\\n    }\\n}\\n\",\"keccak256\":\"0x656ec97b64e20037e4282017f3ecd730b0b197b2e27db09f253558da14d825ba\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGuessGame.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IGuessGame {\\n    function initialize(address _factory, address _tokenAddress, uint256 _startTime, uint256 _interval, uint256 _interval_nums) external;\\n\\n    // _number from 1 to 1000, maxAmount = 100000 * 1e18\\n    function chooseNumberAndStake(uint256 _number, uint256 _tokenAmount) external;\\n\\n    function setIntervalWeight(uint256[] memory weights) external;\\n\\n    function withdraw(uint256 _number) external;\\n\\n\\n    // function raiseBet(uint256 _number, uint256 _tokenAmount) external;\\n\\n    // function unstake(uint256 _number, uint256 _tokenAmount) external;\\n}\\n\",\"keccak256\":\"0x63c78e8144c8c318ca2089410395e0c709df3e173bddbc3b1a8b36aa5d90dbf3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGuessGameFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IGuessGameFactory {}\\n\",\"keccak256\":\"0xda5b15c3a076a143c830f1a349eecca5250b5c29f097a35eb3213677e45047ad\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611240806100ed6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806399f91c28116100ad578063ddaa26ad11610071578063ddaa26ad146102ad578063e2e257da146102b6578063f58459da146102c9578063ff6fddf6146102f4578063ffc84656146102fd57600080fd5b806399f91c281461023a578063b6bb744a14610243578063bf41e16f1461027e578063c45a015514610287578063d13f90b41461029a57600080fd5b80633da7b7b9116100f45780633da7b7b9146101b3578063639b299b146101d357806379caeba2146101fe57806389facb201461021e5780639555a2841461022757600080fd5b80630bdf53001461013157806329db1be6146101615780632e1a7d4d1461017457806337ba682d146101895780633b074669146101a0575b600080fd5b603454610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b603554610144906001600160a01b031681565b610187610182366004610e72565b610310565b005b61019260375481565b604051908152602001610158565b6101876101ae366004610e8b565b610459565b6101c66101c1366004610ec9565b61095f565b6040516101589190610eeb565b6101926101e1366004610f59565b603e60209081526000928352604080842090915290825290205481565b61021161020c366004610ec9565b610a04565b6040516101589190610f83565b61019260385481565b610192610235366004610f59565b610a6d565b610192603c5481565b610256610251366004610f59565b610a9e565b604080519586526020860194909452928401919091526060830152608082015260a001610158565b610192603a5481565b603354610144906001600160a01b031681565b6101876102a8366004610fc7565b610aec565b61019260365481565b6101876102c436600461102a565b610c8c565b6101926102d7366004610f59565b603f60209081526000928352604080842090915290825290205481565b61019260395481565b61019261030b366004610e72565b610d53565b6033546001600160a01b031633146103695760405162461bcd60e51b815260206004820152601760248201527611dd595cdcd1d85b594e8815539055551213d492569151604a1b60448201526064015b60405180910390fd5b60375442116103ba5760405162461bcd60e51b815260206004820152601f60248201527f477565737347616d653a204e4f545f494e5f57495448445241575f54494d45006044820152606401610360565b60355460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e91906110e8565b5080603c60008282546104519190611120565b909155505050565b603954603b54146104c15760405162461bcd60e51b815260206004820152602c60248201527f477565737347616d653a20706c656173652073657420696e74657276616c207760448201526b195a59da1d1cc8199a5c9cdd60a21b6064820152608401610360565b6000811180156104db575069152d02c7e14af68000008111155b6105275760405162461bcd60e51b815260206004820152601f60248201527f477565737347616d653a20494e56414c49445f544f4b454e5f414d4f554e54006044820152606401610360565b336000908152604060208190529020546003116105925760405162461bcd60e51b815260206004820152602360248201527f477565737347616d653a204558434545445f4d41585f5354414b45445f4e554d6044820152622122a960e91b6064820152608401610360565b60365442101580156105a657506037544211155b6105f25760405162461bcd60e51b815260206004820152601e60248201527f477565737347616d653a204e4f545f494e5f5354414b494e475f54494d4500006044820152606401610360565b6001821015801561060557506103e88211155b6106515760405162461bcd60e51b815260206004820152601960248201527f477565737347616d653a20494e56414c49445f4e554d424552000000000000006044820152606401610360565b6035546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190611137565b101561071a5760405162461bcd60e51b815260206004820152601f60248201527f477565737347616d653a20494e53554646494349454e545f42414c414e4345006044820152606401610360565b6035546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561076c57600080fd5b505af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a491906110e8565b506000603854603654426107b89190611120565b6107c29190611150565b90506000603b82815481106107d9576107d9611172565b9060005260206000200154836107ef9190611188565b905080603a600082825461080391906111a7565b9250508190555082603c600082825461081c91906111a7565b9091555050336000818152603d60209081526040808320815160a081018352898152428185019081528184018a815260608301898152608084018b8152855460018181018855968a52888a2095516005909102909501948555925194840194909455516002830155915160038201559051600490910155928252603e8152828220878352905290812080548592906108b59084906111a7565b9091555050336000908152603f60209081526040808320878452909152812080548392906108e49084906111a7565b9091555050336000818152604060208181528183208054600181018255908452928190209092018790558051928352908201869052810184905260608101839052608081018290527f313542362b7ef4b2100d3c4f16d63ed95430c90ac1e73b4f11a12e8bd1508ee89060a00160405180910390a150505050565b6001600160a01b0381166000908152603d60209081526040808320805482518185028101850190935280835260609493849084015b828210156109f857838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610994565b50929695505050505050565b6001600160a01b038116600090815260406020818152918190208054825181850281018501909352808352606093830182828015610a6157602002820191906000526020600020905b815481526020019060010190808311610a4d575b50505050509050919050565b60406020528160005260406000208181548110610a8957600080fd5b90600052602060002001600091509150505481565b603d6020528160005260406000208181548110610aba57600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929550909350919085565b600054610100900460ff1615808015610b0c5750600054600160ff909116105b80610b265750303b158015610b26575060005460ff166001145b610b895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610360565b6000805460ff191660011790558015610bac576000805461ff0019166101001790555b610bb4610d74565b603380546001600160a01b0319166001600160a01b0388161790556036849055610bde8284611188565b610be890856111a7565b60375560388390556039829055603480546001600160a01b0387166001600160a01b03199182168117909255603580549091169091179055604080516020810190915260648152610c3d90603b906001610dd2565b508015610c84576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6033546001600160a01b03163314610ce05760405162461bcd60e51b815260206004820152601760248201527611dd595cdcd1d85b594e8815539055551213d492569151604a1b6044820152606401610360565b603954815114610d3c5760405162461bcd60e51b815260206004820152602160248201527f477565737347616d653a20494e56414c49445f574549474854535f4c454e47546044820152600960fb1b6064820152608401610360565b8051610d4f90603b906020840190610e22565b5050565b603b8181548110610d6357600080fd5b600091825260209091200154905081565b600054610100900460ff16610d9b5760405162461bcd60e51b8152600401610360906111bf565b610da3610da5565b565b600054610100900460ff16610dcc5760405162461bcd60e51b8152600401610360906111bf565b60018055565b828054828255906000526020600020908101928215610e12579160200282015b82811115610e12578251829060ff16905591602001919060010190610df2565b50610e1e929150610e5d565b5090565b828054828255906000526020600020908101928215610e12579160200282015b82811115610e12578251825591602001919060010190610e42565b5b80821115610e1e5760008155600101610e5e565b600060208284031215610e8457600080fd5b5035919050565b60008060408385031215610e9e57600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610ec457600080fd5b919050565b600060208284031215610edb57600080fd5b610ee482610ead565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610f4c5781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a09093019290850190600101610f08565b5091979650505050505050565b60008060408385031215610f6c57600080fd5b610f7583610ead565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015610fbb57835183529284019291840191600101610f9f565b50909695505050505050565b600080600080600060a08688031215610fdf57600080fd5b610fe886610ead565b9450610ff660208701610ead565b94979496505050506040830135926060810135926080909101359150565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561103d57600080fd5b823567ffffffffffffffff8082111561105557600080fd5b818501915085601f83011261106957600080fd5b81358181111561107b5761107b611014565b8060051b604051601f19603f830116810181811085821117156110a0576110a0611014565b6040529182528482019250838101850191888311156110be57600080fd5b938501935b828510156110dc578435845293850193928501926110c3565b98975050505050505050565b6000602082840312156110fa57600080fd5b81518015158114610ee457600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156111325761113261110a565b500390565b60006020828403121561114957600080fd5b5051919050565b60008261116d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156111a2576111a261110a565b500290565b600082198211156111ba576111ba61110a565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220cb33e334b517872f4e917db8720c108163d7896b12fbe9ad65a3a8beff34e78164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806399f91c28116100ad578063ddaa26ad11610071578063ddaa26ad146102ad578063e2e257da146102b6578063f58459da146102c9578063ff6fddf6146102f4578063ffc84656146102fd57600080fd5b806399f91c281461023a578063b6bb744a14610243578063bf41e16f1461027e578063c45a015514610287578063d13f90b41461029a57600080fd5b80633da7b7b9116100f45780633da7b7b9146101b3578063639b299b146101d357806379caeba2146101fe57806389facb201461021e5780639555a2841461022757600080fd5b80630bdf53001461013157806329db1be6146101615780632e1a7d4d1461017457806337ba682d146101895780633b074669146101a0575b600080fd5b603454610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b603554610144906001600160a01b031681565b610187610182366004610e72565b610310565b005b61019260375481565b604051908152602001610158565b6101876101ae366004610e8b565b610459565b6101c66101c1366004610ec9565b61095f565b6040516101589190610eeb565b6101926101e1366004610f59565b603e60209081526000928352604080842090915290825290205481565b61021161020c366004610ec9565b610a04565b6040516101589190610f83565b61019260385481565b610192610235366004610f59565b610a6d565b610192603c5481565b610256610251366004610f59565b610a9e565b604080519586526020860194909452928401919091526060830152608082015260a001610158565b610192603a5481565b603354610144906001600160a01b031681565b6101876102a8366004610fc7565b610aec565b61019260365481565b6101876102c436600461102a565b610c8c565b6101926102d7366004610f59565b603f60209081526000928352604080842090915290825290205481565b61019260395481565b61019261030b366004610e72565b610d53565b6033546001600160a01b031633146103695760405162461bcd60e51b815260206004820152601760248201527611dd595cdcd1d85b594e8815539055551213d492569151604a1b60448201526064015b60405180910390fd5b60375442116103ba5760405162461bcd60e51b815260206004820152601f60248201527f477565737347616d653a204e4f545f494e5f57495448445241575f54494d45006044820152606401610360565b60355460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e91906110e8565b5080603c60008282546104519190611120565b909155505050565b603954603b54146104c15760405162461bcd60e51b815260206004820152602c60248201527f477565737347616d653a20706c656173652073657420696e74657276616c207760448201526b195a59da1d1cc8199a5c9cdd60a21b6064820152608401610360565b6000811180156104db575069152d02c7e14af68000008111155b6105275760405162461bcd60e51b815260206004820152601f60248201527f477565737347616d653a20494e56414c49445f544f4b454e5f414d4f554e54006044820152606401610360565b336000908152604060208190529020546003116105925760405162461bcd60e51b815260206004820152602360248201527f477565737347616d653a204558434545445f4d41585f5354414b45445f4e554d6044820152622122a960e91b6064820152608401610360565b60365442101580156105a657506037544211155b6105f25760405162461bcd60e51b815260206004820152601e60248201527f477565737347616d653a204e4f545f494e5f5354414b494e475f54494d4500006044820152606401610360565b6001821015801561060557506103e88211155b6106515760405162461bcd60e51b815260206004820152601960248201527f477565737347616d653a20494e56414c49445f4e554d424552000000000000006044820152606401610360565b6035546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190611137565b101561071a5760405162461bcd60e51b815260206004820152601f60248201527f477565737347616d653a20494e53554646494349454e545f42414c414e4345006044820152606401610360565b6035546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561076c57600080fd5b505af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a491906110e8565b506000603854603654426107b89190611120565b6107c29190611150565b90506000603b82815481106107d9576107d9611172565b9060005260206000200154836107ef9190611188565b905080603a600082825461080391906111a7565b9250508190555082603c600082825461081c91906111a7565b9091555050336000818152603d60209081526040808320815160a081018352898152428185019081528184018a815260608301898152608084018b8152855460018181018855968a52888a2095516005909102909501948555925194840194909455516002830155915160038201559051600490910155928252603e8152828220878352905290812080548592906108b59084906111a7565b9091555050336000908152603f60209081526040808320878452909152812080548392906108e49084906111a7565b9091555050336000818152604060208181528183208054600181018255908452928190209092018790558051928352908201869052810184905260608101839052608081018290527f313542362b7ef4b2100d3c4f16d63ed95430c90ac1e73b4f11a12e8bd1508ee89060a00160405180910390a150505050565b6001600160a01b0381166000908152603d60209081526040808320805482518185028101850190935280835260609493849084015b828210156109f857838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610994565b50929695505050505050565b6001600160a01b038116600090815260406020818152918190208054825181850281018501909352808352606093830182828015610a6157602002820191906000526020600020905b815481526020019060010190808311610a4d575b50505050509050919050565b60406020528160005260406000208181548110610a8957600080fd5b90600052602060002001600091509150505481565b603d6020528160005260406000208181548110610aba57600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929550909350919085565b600054610100900460ff1615808015610b0c5750600054600160ff909116105b80610b265750303b158015610b26575060005460ff166001145b610b895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610360565b6000805460ff191660011790558015610bac576000805461ff0019166101001790555b610bb4610d74565b603380546001600160a01b0319166001600160a01b0388161790556036849055610bde8284611188565b610be890856111a7565b60375560388390556039829055603480546001600160a01b0387166001600160a01b03199182168117909255603580549091169091179055604080516020810190915260648152610c3d90603b906001610dd2565b508015610c84576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6033546001600160a01b03163314610ce05760405162461bcd60e51b815260206004820152601760248201527611dd595cdcd1d85b594e8815539055551213d492569151604a1b6044820152606401610360565b603954815114610d3c5760405162461bcd60e51b815260206004820152602160248201527f477565737347616d653a20494e56414c49445f574549474854535f4c454e47546044820152600960fb1b6064820152608401610360565b8051610d4f90603b906020840190610e22565b5050565b603b8181548110610d6357600080fd5b600091825260209091200154905081565b600054610100900460ff16610d9b5760405162461bcd60e51b8152600401610360906111bf565b610da3610da5565b565b600054610100900460ff16610dcc5760405162461bcd60e51b8152600401610360906111bf565b60018055565b828054828255906000526020600020908101928215610e12579160200282015b82811115610e12578251829060ff16905591602001919060010190610df2565b50610e1e929150610e5d565b5090565b828054828255906000526020600020908101928215610e12579160200282015b82811115610e12578251825591602001919060010190610e42565b5b80821115610e1e5760008155600101610e5e565b600060208284031215610e8457600080fd5b5035919050565b60008060408385031215610e9e57600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610ec457600080fd5b919050565b600060208284031215610edb57600080fd5b610ee482610ead565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610f4c5781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a09093019290850190600101610f08565b5091979650505050505050565b60008060408385031215610f6c57600080fd5b610f7583610ead565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015610fbb57835183529284019291840191600101610f9f565b50909695505050505050565b600080600080600060a08688031215610fdf57600080fd5b610fe886610ead565b9450610ff660208701610ead565b94979496505050506040830135926060810135926080909101359150565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561103d57600080fd5b823567ffffffffffffffff8082111561105557600080fd5b818501915085601f83011261106957600080fd5b81358181111561107b5761107b611014565b8060051b604051601f19603f830116810181811085821117156110a0576110a0611014565b6040529182528482019250838101850191888311156110be57600080fd5b938501935b828510156110dc578435845293850193928501926110c3565b98975050505050505050565b6000602082840312156110fa57600080fd5b81518015158114610ee457600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156111325761113261110a565b500390565b60006020828403121561114957600080fd5b5051919050565b60008261116d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156111a2576111a261110a565b500290565b600082198211156111ba576111ba61110a565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220cb33e334b517872f4e917db8720c108163d7896b12fbe9ad65a3a8beff34e78164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 182,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 240,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3375,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "factory",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IGuessGameFactory)4022"
      },
      {
        "astId": 3388,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "TOKEN_ADDRESS",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 3391,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "UNDERLYING_TOKEN",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IERC20)1878"
      },
      {
        "astId": 3393,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "START_TIME",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 3395,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "END_TIME",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 3397,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "INTERVAL",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 3399,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "INTERVAL_NUMS",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 3401,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "TOTAL_SHARE",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 3404,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "INTERVAL_WEIGHTS",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3406,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "REWARD_POOL",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 3412,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "userOperationHistory",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_array(t_struct(Operation)3386_storage)dyn_storage)"
      },
      {
        "astId": 3418,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "userStakedAmountPerNumber",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3424,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "userStakedSharePerNumber",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3429,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "userChosenNumbers",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Operation)3386_storage)dyn_storage": {
        "base": "t_struct(Operation)3386_storage",
        "encoding": "dynamic_array",
        "label": "struct GuessGame.Operation[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1878": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGuessGameFactory)4022": {
        "encoding": "inplace",
        "label": "contract IGuessGameFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Operation)3386_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GuessGame.Operation[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Operation)3386_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Operation)3386_storage": {
        "encoding": "inplace",
        "label": "struct GuessGame.Operation",
        "members": [
          {
            "astId": 3377,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3379,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3381,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3383,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "shares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3385,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "day",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}