{
  "address": "0xCbACD159e8aBDfdb50BD03f7cd752891a44D1d58",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chosenNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "ChooseAndStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "averageNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "random",
          "type": "uint256"
        }
      ],
      "name": "FinalNumberSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AVERAGE_NUMBER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "END_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FINAL_NUMBER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERVAL_NUMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "INTERVAL_WEIGHTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_POOL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_SHARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNDERLYING_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "chooseNumberAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IGuessGameFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "generateRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalBetCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "stakedNumbers",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "uniqAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "userRewardAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "number",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "day",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "weight",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GuessGame.Operation[]",
              "name": "userOperationHistory",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "userChosenNumbers",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "AVERAGE_NUMBER",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "FINAL_NUMBER",
              "type": "uint256"
            }
          ],
          "internalType": "struct GuessGame.AllInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAverageNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedNumberInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakedShare",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "stakers",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "number",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "staker",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "share",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GuessGame.NumberUserShareInfo[]",
              "name": "stakerShareInfos",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct GuessGame.StakedNumberInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserChosenNumber",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserOperationHistories",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "day",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            }
          ],
          "internalType": "struct GuessGame.Operation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval_nums",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numberUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setFinalNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "setIntervalWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "name": "setRewardForUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalStakedSharePerNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uniqAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userChosenNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userNumberShareMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userNumberStakedAmountMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userOperationHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f0bd0219d4dafe8b2ea8c8a1c50e6ce13e841a929b538960e1b791f8f60340e",
  "receipt": {
    "to": null,
    "from": "0x0502A4B6d4732564F6861a931d33544D7914C272",
    "contractAddress": "0xCbACD159e8aBDfdb50BD03f7cd752891a44D1d58",
    "transactionIndex": 55,
    "gasUsed": "2228625",
    "logsBloom": "0x
    "blockHash": "0xe1a7d24364206f4f567de180fedce0368580b3bab6857d23322b3360c4827a6b",
    "transactionHash": "0x8f0bd0219d4dafe8b2ea8c8a1c50e6ce13e841a929b538960e1b791f8f60340e",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 4861607,
        "transactionHash": "0x8f0bd0219d4dafe8b2ea8c8a1c50e6ce13e841a929b538960e1b791f8f60340e",
        "address": "0xCbACD159e8aBDfdb50BD03f7cd752891a44D1d58",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 53,
        "blockHash": "0xe1a7d24364206f4f567de180fedce0368580b3bab6857d23322b3360c4827a6b"
      }
    ],
    "blockNumber": 4861607,
    "cumulativeGasUsed": "8771301",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "30ea8db3481f80ff74f8d11954b2e290",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chosenNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"ChooseAndStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averageNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"FinalNumberSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AVERAGE_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"END_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FINAL_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERVAL_NUMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"INTERVAL_WEIGHTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"chooseNumberAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IGuessGameFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalBetCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"uniqAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"userRewardAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct GuessGame.Operation[]\",\"name\":\"userOperationHistory\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"userChosenNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"AVERAGE_NUMBER\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FINAL_NUMBER\",\"type\":\"uint256\"}],\"internalType\":\"struct GuessGame.AllInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAverageNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedNumberInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedShare\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"internalType\":\"struct GuessGame.NumberUserShareInfo[]\",\"name\":\"stakerShareInfos\",\"type\":\"tuple[]\"}],\"internalType\":\"struct GuessGame.StakedNumberInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserChosenNumber\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserOperationHistories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct GuessGame.Operation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval_nums\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFinalNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"setIntervalWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"setRewardForUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStakedSharePerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userChosenNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNumberShareMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNumberStakedAmountMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userOperationHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GuessGame.sol\":\"GuessGame\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/GuessGame.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IGuessGame.sol\\\";\\nimport \\\"./interfaces/IGuessGameFactory.sol\\\";\\n\\ncontract GuessGame is Initializable, ReentrancyGuardUpgradeable, IGuessGame {\\n    using Strings for uint256;\\n\\n    IGuessGameFactory public factory;\\n\\n    struct Operation {\\n        uint256 number;\\n        uint256 timestamp;\\n        uint256 amount;\\n        uint256 shares;\\n        uint256 day;\\n        uint256 weight;\\n    }\\n\\n    struct NumberUserShareInfo {\\n        uint256 number;\\n        address staker;\\n        uint256 share;\\n    }\\n\\n    struct StakedNumberInfo {\\n        uint256 number;\\n        uint256 totalStakedShare;\\n        address[] stakers;\\n        NumberUserShareInfo[] stakerShareInfos;\\n    }\\n\\n\\n\\n    address public TOKEN_ADDRESS;\\n    IERC20 public UNDERLYING_TOKEN;\\n    uint256 public START_TIME;\\n    uint256 public END_TIME;\\n    uint256 public INTERVAL;\\n    uint256 public INTERVAL_NUMS;\\n    uint256 public TOTAL_SHARE;\\n    uint256[] public INTERVAL_WEIGHTS;\\n    uint256 public REWARD_POOL;\\n\\n    // user infos\\n    mapping(address => Operation[]) public userOperationHistory;\\n    // user => number => amount\\n    mapping(address => mapping(uint256 => uint256)) public userNumberStakedAmountMapping;\\n    // user => number => share\\n    mapping(address => mapping(uint256 => uint256)) public userNumberShareMapping;\\n    // user => number[]\\n    mapping(address => uint256[]) public userChosenNumbers;\\n    // uniqAddresses\\n    address[] public uniqAddresses;\\n    //\\n    uint256 public totalBetCount = 0;\\n\\n    // number => user => share\\n    mapping(uint256 => mapping(address => uint256)) numberUserShareMapping;\\n    // number => user[]\\n    mapping(uint256 => address[]) public numberUsers;\\n\\n    // user => rewardAmount\\n    mapping(address => uint256) public userRewardAmount;\\n\\n    // all infos\\n    // number => shares\\n    mapping(uint256 => uint256) public totalStakedSharePerNumber;\\n    // all staked numbers, number[]\\n    uint256[] public stakedNumbers;\\n\\n    // \\u5f00\\u5956\\u53f7\\u7801 \\n    uint256 public AVERAGE_NUMBER;\\n    uint256 public FINAL_NUMBER;\\n\\n    event ChooseAndStake(address staker, uint256 chosenNumber, uint256 amount, uint256 day, uint256 shares);\\n    event FinalNumberSet(uint256 finalNumber, uint256 averageNumber, uint256 random);\\n\\n    struct AllInfo {\\n        uint256 totalBetCount;\\n        uint256 totalShare;\\n        uint256 rewardPool;\\n        uint256[] stakedNumbers;\\n        address[] uniqAddresses;\\n        uint256 userRewardAmount;\\n        Operation[] userOperationHistory;\\n        uint256[] userChosenNumbers;\\n        uint256 AVERAGE_NUMBER;\\n        uint256 FINAL_NUMBER;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == address(factory), \\\"GuessGame: UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    modifier inSettlementTime() {\\n        uint256 day = (block.timestamp - START_TIME) / INTERVAL;\\n        // day should more than INTERVAL_NUMS\\n        require(day >= INTERVAL_NUMS, \\\"GuessGame: NOT_IN_SETTLEMENT_TIME\\\");\\n        _;\\n    }\\n\\n    // get stakedNumber info List in stakedNumbers\\n    function getStakedNumberInfos() public view returns (StakedNumberInfo[] memory) {\\n        uint256[] memory numbers = stakedNumbers;\\n        StakedNumberInfo[] memory infos = new StakedNumberInfo[](numbers.length);\\n        for (uint256 i = 0; i < numbers.length; i++) {\\n            uint256 number = numbers[i];\\n\\n            // set NumberUserShareInfo for infos[i]\\n            NumberUserShareInfo[] memory shareInfos = new NumberUserShareInfo[](numberUsers[number].length);\\n            for (uint256 j = 0; j < numberUsers[number].length; j++) {\\n                address user = numberUsers[number][j];\\n                shareInfos[j] = NumberUserShareInfo({\\n                    number: number,\\n                    staker: user,\\n                    share: numberUserShareMapping[number][user]\\n                });\\n            }\\n\\n\\n            infos[i] = StakedNumberInfo({\\n                number: number,\\n                totalStakedShare: totalStakedSharePerNumber[number],\\n                stakers: numberUsers[number],\\n                stakerShareInfos: shareInfos\\n            });\\n        }\\n        return infos;\\n    }\\n\\n    function getAllInfos() public view returns (AllInfo memory) {\\n        return AllInfo({\\n            totalBetCount: totalBetCount,\\n            totalShare: TOTAL_SHARE,\\n            rewardPool: REWARD_POOL,\\n            stakedNumbers: stakedNumbers,\\n            uniqAddresses: uniqAddresses,\\n            userRewardAmount: userRewardAmount[msg.sender],\\n            userOperationHistory: userOperationHistory[msg.sender],\\n            userChosenNumbers: userChosenNumbers[msg.sender],\\n            AVERAGE_NUMBER: AVERAGE_NUMBER,\\n            FINAL_NUMBER: FINAL_NUMBER\\n        });\\n    }\\n    \\n\\n    function getAverageNumber() public view returns (uint256) {\\n        uint256[] memory numbers = stakedNumbers;\\n        uint256 sharedSum = 0;\\n        uint256 weightedAccumulation = 0;\\n        for (uint256 i = 0; i < numbers.length; i++) {\\n            uint256 number = numbers[i];\\n            uint256 totalStakedShare = totalStakedSharePerNumber[number];\\n            sharedSum += totalStakedShare;\\n            weightedAccumulation += totalStakedShare * number;\\n        }\\n        uint256 averageNumber = weightedAccumulation / sharedSum;\\n\\n        return averageNumber;\\n    }\\n\\n    function generateRandomNumber() public view returns (uint256) {\\n        uint256 seed = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, blockhash(block.number - 1))));\\n        return seed % 201; // Modulo 201 to get a number in the range [0, 200]\\n    }\\n\\n    function setFinalNumber() external onlyFactory inSettlementTime {\\n        uint256[] memory numbers = stakedNumbers;\\n        uint256 sharedSum = 0;\\n        uint256 weightedAccumulation = 0;\\n        for (uint256 i = 0; i < numbers.length; i++) {\\n            uint256 number = numbers[i];\\n            uint256 totalStakedShare = totalStakedSharePerNumber[number];\\n            sharedSum += totalStakedShare;\\n            weightedAccumulation += totalStakedShare * number;\\n        }\\n        uint256 averageNumber = weightedAccumulation / sharedSum;\\n        AVERAGE_NUMBER = averageNumber;\\n        uint256 finalNumber = averageNumber;\\n\\n        // final number is averageNumber add [0, 200]\\n        uint256 random = generateRandomNumber();\\n        if (finalNumber + random > 1100) {\\n            finalNumber = 1100;\\n        } else if (finalNumber + random < 101) {\\n            finalNumber = 101;\\n        } else {\\n            finalNumber += random;\\n        }\\n        finalNumber -= 100;\\n        FINAL_NUMBER = finalNumber;\\n        emit FinalNumberSet(finalNumber, averageNumber, random);\\n    }\\n\\n    // set reward for users according to input params\\n    function setRewardForUsers(address[] memory users, uint256[] memory rewards) external onlyFactory inSettlementTime {\\n        require(users.length == rewards.length, \\\"GuessGame: INVALID_USERS_REWARDS_LENGTH\\\");\\n        uint256 totalReward = 0;\\n        for (uint256 i = 0; i < users.length; i++) {\\n            address user = users[i];\\n            uint256 the_reward = rewards[i];\\n            totalReward += the_reward;\\n            userRewardAmount[user] = the_reward;\\n        }\\n        if (totalReward > REWARD_POOL) {\\n            revert(\\\"GuessGame: EXCEED_REWARD_POOL\\\");\\n        }\\n    }\\n\\n    function claimReward() public inSettlementTime {\\n        uint256 reward = userRewardAmount[msg.sender];\\n        userRewardAmount[msg.sender] -= reward;\\n        UNDERLYING_TOKEN.transfer(msg.sender, reward);\\n    }\\n\\n    function setIntervalWeight(uint256[] memory weights) external onlyFactory {\\n        require(weights.length == INTERVAL_NUMS, \\\"GuessGame: INVALID_WEIGHTS_LENGTH\\\");\\n        require(stakedNumbers.length == 0, \\\"GuessGame: STAKED_NUMBER_NOT_EMPTY\\\");\\n        INTERVAL_WEIGHTS = weights;\\n    }\\n\\n    function initialize(address _factory, address _tokenAddress, uint256 _startTime, uint256 _interval, uint256 _interval_nums) public initializer {\\n        __ReentrancyGuard_init();\\n        factory = IGuessGameFactory(_factory);\\n        START_TIME = _startTime;\\n        END_TIME = _startTime + _interval * _interval_nums;\\n        INTERVAL = _interval;\\n        INTERVAL_NUMS = _interval_nums;\\n        TOKEN_ADDRESS = _tokenAddress;\\n        UNDERLYING_TOKEN = IERC20(_tokenAddress);\\n        INTERVAL_WEIGHTS = [100];\\n    }\\n\\n\\n    // _number from 1 to 1000, maxAmount = 100000 * 1e18\\n    function chooseNumberAndStake(uint256 _number, uint256 _tokenAmount) public {\\n        require(INTERVAL_WEIGHTS.length == INTERVAL_NUMS, \\\"GuessGame: please set interval weights first\\\");\\n        require(_tokenAmount > 0 && _tokenAmount <= 100000 * 1e18, \\\"GuessGame: INVALID_TOKEN_AMOUNT\\\");\\n        require(block.timestamp >= START_TIME && block.timestamp <= END_TIME, \\\"GuessGame: NOT_IN_STAKING_TIME\\\");\\n        require(_number >= 1 && _number <= 1000, \\\"GuessGame: INVALID_NUMBER\\\");\\n        require(UNDERLYING_TOKEN.balanceOf(msg.sender) >= _tokenAmount, \\\"GuessGame: INSUFFICIENT_BALANCE\\\");\\n\\n        require(userChosenNumbers[msg.sender].length < 3, \\\"GuessGame: EXCEED_MAX_STAKED_NUMBER\\\");\\n\\n        if (userChosenNumbers[msg.sender].length == 3) {\\n            bool flag = false;\\n            for (uint256 i = 0; i < userChosenNumbers[msg.sender].length; i++) {\\n                if (userChosenNumbers[msg.sender][i] == _number) {\\n                    flag = true;\\n                    break;\\n                }\\n            }\\n            if (flag == false) {\\n                revert(\\\"GuessGame: EXCEED_MAX_STAKED_NUMBER\\\");\\n            }\\n        }\\n        require(_tokenAmount + userNumberStakedAmountMapping[msg.sender][_number] <= 100000 * 1e18, \\\"GuessGame: EXCEED_MAX_STAKED_AMOUNT\\\");\\n\\n        UNDERLYING_TOKEN.transferFrom(msg.sender, address(this), _tokenAmount);\\n        uint256 day = (block.timestamp - START_TIME) / INTERVAL;\\n        uint256 shares = _tokenAmount * INTERVAL_WEIGHTS[day];\\n        TOTAL_SHARE += shares;\\n        REWARD_POOL += _tokenAmount;\\n\\n        if (userChosenNumbers[msg.sender].length == 0) {\\n            uniqAddresses.push(msg.sender);\\n        }\\n\\n        userOperationHistory[msg.sender].push(Operation({\\n            number: _number,\\n            timestamp: block.timestamp,\\n            amount: _tokenAmount,\\n            shares: shares,\\n            day: day,\\n            weight: INTERVAL_WEIGHTS[day]\\n        }));\\n        userNumberStakedAmountMapping[msg.sender][_number] += _tokenAmount;\\n        if (userNumberShareMapping[msg.sender][_number] == 0) {\\n            userChosenNumbers[msg.sender].push(_number);\\n        }\\n        userNumberShareMapping[msg.sender][_number] += shares;\\n\\n        if (numberUserShareMapping[_number][msg.sender] == 0) {\\n            numberUsers[_number].push(msg.sender);\\n        }\\n        numberUserShareMapping[_number][msg.sender] += shares;\\n        if (totalStakedSharePerNumber[_number] == 0) {\\n            stakedNumbers.push(_number);\\n        }\\n\\n\\n        totalStakedSharePerNumber[_number] += shares;\\n        totalBetCount += 1;\\n        emit ChooseAndStake(msg.sender, _number,  _tokenAmount, day, shares);\\n    }\\n\\n    function withdraw(uint256 _number) external onlyFactory {\\n        require(block.timestamp > END_TIME, \\\"GuessGame: NOT_IN_WITHDRAW_TIME\\\");\\n        \\n        UNDERLYING_TOKEN.transfer(msg.sender, _number);\\n        REWARD_POOL -= _number;\\n    }\\n\\n    function getUserOperationHistories(address _user) public view returns (Operation[] memory) {\\n        Operation[] memory operations = userOperationHistory[_user];\\n\\n        return operations;\\n    }\\n\\n    function getUserChosenNumber(address _user) public view returns (uint256[] memory) {\\n        return userChosenNumbers[_user];\\n    }\\n}\\n\",\"keccak256\":\"0x5cc3c062b25b7d7a3df2b2134b06d6a560b9172b1c9ff848aa8aa8cbcece0e62\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGuessGame.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IGuessGame {\\n    function initialize(address _factory, address _tokenAddress, uint256 _startTime, uint256 _interval, uint256 _interval_nums) external;\\n\\n    // _number from 1 to 1000, maxAmount = 100000 * 1e18\\n    function chooseNumberAndStake(uint256 _number, uint256 _tokenAmount) external;\\n\\n    function setIntervalWeight(uint256[] memory weights) external;\\n\\n    function setFinalNumber() external;\\n\\n    function setRewardForUsers(address[] memory users, uint256[] memory rewards) external;\\n\\n    function withdraw(uint256 _number) external;\\n\\n\\n    // function raiseBet(uint256 _number, uint256 _tokenAmount) external;\\n\\n    // function unstake(uint256 _number, uint256 _tokenAmount) external;\\n}\\n\",\"keccak256\":\"0xd7fde8163668b3aae338033022db16742293e4fef4be3b3c46928d8dcdf44220\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGuessGameFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IGuessGameFactory {}\\n\",\"keccak256\":\"0xda5b15c3a076a143c830f1a349eecca5250b5c29f097a35eb3213677e45047ad\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405260006042553480156200001657600080fd5b506200002162000027565b620000e9565b600054610100900460ff1615620000945760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e7576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6126d280620000f96000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806379caeba211610125578063bfba5031116100ad578063d80516a51161007c578063d80516a51461049e578063ddaa26ad146104b3578063e2e257da146104bc578063ff6fddf6146104cf578063ffc84656146104d857600080fd5b8063bfba503114610445578063c45a015514610465578063c87c336b14610478578063d13f90b41461048b57600080fd5b8063b599afc8116100f4578063b599afc8146103d8578063b6bb744a146103e1578063b88a802f14610421578063b8b7903d14610429578063bf41e16f1461043c57600080fd5b806379caeba21461039357806389facb20146103b35780639555a284146103bc57806399f91c28146103cf57600080fd5b806337ba682d116101a857806351e3b12b1161017757806351e3b12b1461033a5780636a6077251461035a5780636df84f2d1461036d5780637048c29814610382578063773a11541461038b57600080fd5b806337ba682d146102d357806338a70be6146102dc5780633b074669146103075780633da7b7b91461031a57600080fd5b80631d4db94e116101e45780631d4db94e1461026f5780631fb18d521461028257806329db1be6146102ad5780632e1a7d4d146102c057600080fd5b806301e25d2d1461021657806309415c17146102315780630bdf53001461023a5780631c2f03ec14610265575b600080fd5b61021e6104eb565b6040519081526020015b60405180910390f35b61021e60495481565b60345461024d906001600160a01b031681565b6040516001600160a01b039091168152602001610228565b61026d6105d0565b005b61024d61027d366004611ebd565b6107d5565b61021e610290366004611ef2565b603e60209081526000928352604080842090915290825290205481565b60355461024d906001600160a01b031681565b61026d6102ce366004611ebd565b6107ff565b61021e60375481565b61021e6102ea366004611ef2565b603f60209081526000928352604080842090915290825290205481565b61026d610315366004611f1c565b610919565b61032d610328366004611f3e565b6110db565b6040516102289190611f60565b61021e610348366004611f3e565b60456020526000908152604090205481565b61021e610368366004611ebd565b61118a565b6103756111ab565b604051610228919061201e565b61021e60485481565b61021e6114ae565b6103a66103a1366004611f3e565b611504565b604051610228919061212b565b61021e60385481565b61021e6103ca366004611ef2565b61156d565b61021e603c5481565b61021e60425481565b6103f46103ef366004611ef2565b61159e565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610228565b61026d6115f2565b61024d610437366004611f1c565b6116e0565b61021e603a5481565b61021e610453366004611ebd565b60466020526000908152604090205481565b60335461024d906001600160a01b031681565b61026d610486366004612214565b611718565b61026d6104993660046122d4565b6118c0565b6104a6611a60565b6040516102289190612387565b61021e60365481565b61026d6104ca36600461244b565b611cb7565b61021e60395481565b61021e6104e6366004611ebd565b611daf565b600080604780548060200260200160405190810160405280929190818152602001828054801561053a57602002820191906000526020600020905b815481526020019060010190808311610526575b5050505050905060008060005b83518110156105ba57600084828151811061056457610564612488565b6020908102919091018101516000818152604690925260409091205490915061058d81866124b4565b945061059982826124cc565b6105a390856124b4565b9350505080806105b2906124eb565b915050610547565b5060006105c7838361251c565b95945050505050565b6033546001600160a01b031633146106035760405162461bcd60e51b81526004016105fa90612530565b60405180910390fd5b6000603854603654426106169190612567565b610620919061251c565b90506039548110156106445760405162461bcd60e51b81526004016105fa9061257e565b6000604780548060200260200160405190810160405280929190818152602001828054801561069257602002820191906000526020600020905b81548152602001906001019080831161067e575b5050505050905060008060005b83518110156107125760008482815181106106bc576106bc612488565b602090810291909101810151600081815260469092526040909120549091506106e581866124b4565b94506106f182826124cc565b6106fb90856124b4565b93505050808061070a906124eb565b91505061069f565b50600061071f838361251c565b604881905590508060006107316114ae565b905061044c61074082846124b4565b11156107505761044c9150610778565b606561075c82846124b4565b101561076b5760659150610778565b61077581836124b4565b91505b610783606483612567565b604981905560408051828152602081018690529081018390529092507f29dc0f72cc6bec32fa534972f7d9266bcf3fc044f9ac8abac9b9f1ef7e3d87d59060600160405180910390a150505050505050565b604181815481106107e557600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146108295760405162461bcd60e51b81526004016105fa90612530565b603754421161087a5760405162461bcd60e51b815260206004820152601f60248201527f477565737347616d653a204e4f545f494e5f57495448445241575f54494d450060448201526064016105fa565b60355460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156108c657600080fd5b505af11580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe91906125bf565b5080603c60008282546109119190612567565b909155505050565b603954603b54146109815760405162461bcd60e51b815260206004820152602c60248201527f477565737347616d653a20706c656173652073657420696e74657276616c207760448201526b195a59da1d1cc8199a5c9cdd60a21b60648201526084016105fa565b60008111801561099b575069152d02c7e14af68000008111155b6109e75760405162461bcd60e51b815260206004820152601f60248201527f477565737347616d653a20494e56414c49445f544f4b454e5f414d4f554e540060448201526064016105fa565b60365442101580156109fb57506037544211155b610a475760405162461bcd60e51b815260206004820152601e60248201527f477565737347616d653a204e4f545f494e5f5354414b494e475f54494d45000060448201526064016105fa565b60018210158015610a5a57506103e88211155b610aa65760405162461bcd60e51b815260206004820152601960248201527f477565737347616d653a20494e56414c49445f4e554d4245520000000000000060448201526064016105fa565b6035546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2191906125e1565b1015610b6f5760405162461bcd60e51b815260206004820152601f60248201527f477565737347616d653a20494e53554646494349454e545f42414c414e43450060448201526064016105fa565b33600090815260406020819052902054600311610b9e5760405162461bcd60e51b81526004016105fa906125fa565b3360009081526040602081905290205460031415610c41576000805b33600090815260406020819052902054811015610c2157336000908152604060208190529020805485919083908110610bf557610bf5612488565b90600052602060002001541415610c0f5760019150610c21565b80610c19816124eb565b915050610bba565b5080610c3f5760405162461bcd60e51b81526004016105fa906125fa565b505b336000908152603e6020908152604080832085845290915290205469152d02c7e14af680000090610c7290836124b4565b1115610ccc5760405162461bcd60e51b815260206004820152602360248201527f477565737347616d653a204558434545445f4d41585f5354414b45445f414d4f60448201526215539560ea1b60648201526084016105fa565b6035546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610d1e57600080fd5b505af1158015610d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5691906125bf565b50600060385460365442610d6a9190612567565b610d74919061251c565b90506000603b8281548110610d8b57610d8b612488565b906000526020600020015483610da191906124cc565b905080603a6000828254610db591906124b4565b9250508190555082603c6000828254610dce91906124b4565b909155505033600090815260406020819052902054610e2a57604180546001810182556000919091527f7c9785e8241615bc80415d89775984a1337d15dc1bf4ce50f41988b2a2b336a70180546001600160a01b031916331790555b603d6000336001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280868152602001428152602001858152602001838152602001848152602001603b8581548110610e8b57610e8b612488565b6000918252602080832090910154909252835460018181018655948252828220845160069092020190815583830151948101949094556040808401516002860155606084015160038601556080840151600486015560a090930151600590940193909355338352603e8152818320878452905281208054859290610f109084906124b4565b9091555050336000908152603f60209081526040808320878452909152902054610f56573360009081526040602081815290822080546001810182559083529120018490555b336000908152603f6020908152604080832087845290915281208054839290610f809084906124b4565b90915550506000848152604360209081526040808320338452909152902054610fd25760008481526044602090815260408220805460018101825590835291200180546001600160a01b031916331790555b600084815260436020908152604080832033845290915281208054839290610ffb9084906124b4565b909155505060008481526046602052604090205461104957604780546001810182556000919091527fc43c1e24e1884c4e28a16bbd9506f60b5ca9f18fc90635e729d3cfe13abcf001018490555b600084815260466020526040812080548392906110679084906124b4565b9250508190555060016042600082825461108191906124b4565b9091555050604080513381526020810186905290810184905260608101839052608081018290527f313542362b7ef4b2100d3c4f16d63ed95430c90ac1e73b4f11a12e8bd1508ee89060a00160405180910390a150505050565b6001600160a01b0381166000908152603d60209081526040808320805482518185028101850190935280835260609493849084015b8282101561117e57838290600052602060002090600602016040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505081526020019060010190611110565b50929695505050505050565b6047818154811061119a57600080fd5b600091825260209091200154905081565b6060600060478054806020026020016040519081016040528092919081815260200182805480156111fb57602002820191906000526020600020905b8154815260200190600101908083116111e7575b505050505090506000815167ffffffffffffffff81111561121e5761121e61213e565b60405190808252806020026020018201604052801561127a57816020015b6112676040518060800160405280600081526020016000815260200160608152602001606081525090565b81526020019060019003908161123c5790505b50905060005b82518110156114a757600083828151811061129d5761129d612488565b60209081029190910181015160008181526044909252604082205490925067ffffffffffffffff8111156112d3576112d361213e565b60405190808252806020026020018201604052801561133157816020015b61131e60405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b8152602001906001900390816112f15790505b50905060005b6000838152604460205260409020548110156113eb57600083815260446020526040812080548390811061136d5761136d612488565b6000918252602080832090910154604080516060810182528881526001600160a01b039092168284018190528885526043845281852081865290935292839020549281019290925284519092508490849081106113cc576113cc612488565b60200260200101819052505080806113e3906124eb565b915050611337565b5060408051608081018252838152600084815260466020908152838220548184015285825260448152908390208054845181840281018401865281815293948501939283018282801561146757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611449575b505050505081526020018281525084848151811061148757611487612488565b60200260200101819052505050808061149f906124eb565b915050611280565b5092915050565b60008042446114be600143612567565b60408051602081019490945283019190915240606082015260800160408051601f19818403018152919052805160209091012090506114fe60c98261263d565b91505090565b6001600160a01b03811660009081526040602081815291819020805482518185028101850190935280835260609383018282801561156157602002820191906000526020600020905b81548152602001906001019080831161154d575b50505050509050919050565b6040602052816000526040600020818154811061158957600080fd5b90600052602060002001600091509150505481565b603d60205281600052604060002081815481106115ba57600080fd5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015493965091945092909186565b6000603854603654426116059190612567565b61160f919061251c565b90506039548110156116335760405162461bcd60e51b81526004016105fa9061257e565b3360009081526045602052604081208054918291906116528380612567565b909155505060355460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156116a357600080fd5b505af11580156116b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db91906125bf565b505050565b604460205281600052604060002081815481106116fc57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6033546001600160a01b031633146117425760405162461bcd60e51b81526004016105fa90612530565b6000603854603654426117559190612567565b61175f919061251c565b90506039548110156117835760405162461bcd60e51b81526004016105fa9061257e565b81518351146117e45760405162461bcd60e51b815260206004820152602760248201527f477565737347616d653a20494e56414c49445f55534552535f524557415244536044820152660be988a9c8ea8960cb1b60648201526084016105fa565b6000805b845181101561186757600085828151811061180557611805612488565b60200260200101519050600085838151811061182357611823612488565b60200260200101519050808461183991906124b4565b6001600160a01b0390921660009081526045602052604090205591508061185f816124eb565b9150506117e8565b50603c548111156118ba5760405162461bcd60e51b815260206004820152601d60248201527f477565737347616d653a204558434545445f5245574152445f504f4f4c00000060448201526064016105fa565b50505050565b600054610100900460ff16158080156118e05750600054600160ff909116105b806118fa5750303b1580156118fa575060005460ff166001145b61195d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105fa565b6000805460ff191660011790558015611980576000805461ff0019166101001790555b611988611dbf565b603380546001600160a01b0319166001600160a01b03881617905560368490556119b282846124cc565b6119bc90856124b4565b60375560388390556039829055603480546001600160a01b0387166001600160a01b03199182168117909255603580549091169091179055604080516020810190915260648152611a1190603b906001611e1d565b508015611a58576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b611ab6604051806101400160405280600081526020016000815260200160008152602001606081526020016060815260200160008152602001606081526020016060815260200160008152602001600081525090565b6040518061014001604052806042548152602001603a548152602001603c5481526020016047805480602002602001604051908101604052809291908181526020018280548015611b2657602002820191906000526020600020905b815481526020019060010190808311611b12575b505050505081526020016041805480602002602001604051908101604052809291908181526020018280548015611b8657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b68575b50505091835250503360008181526045602090815260408083205482860152928252603d81528282208054845181840281018401865281815294909501949092909184015b82821015611c3957838290600052602060002090600602016040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505081526020019060010190611bcb565b5050509082525033600090815260406020818152918190208054825181850281018501909352808352938301939192909190830182828015611c9a57602002820191906000526020600020905b815481526020019060010190808311611c86575b505050505081526020016048548152602001604954815250905090565b6033546001600160a01b03163314611ce15760405162461bcd60e51b81526004016105fa90612530565b603954815114611d3d5760405162461bcd60e51b815260206004820152602160248201527f477565737347616d653a20494e56414c49445f574549474854535f4c454e47546044820152600960fb1b60648201526084016105fa565b60475415611d985760405162461bcd60e51b815260206004820152602260248201527f477565737347616d653a205354414b45445f4e554d4245525f4e4f545f454d50604482015261545960f01b60648201526084016105fa565b8051611dab90603b906020840190611e6d565b5050565b603b818154811061119a57600080fd5b600054610100900460ff16611de65760405162461bcd60e51b81526004016105fa90612651565b611dee611df0565b565b600054610100900460ff16611e175760405162461bcd60e51b81526004016105fa90612651565b60018055565b828054828255906000526020600020908101928215611e5d579160200282015b82811115611e5d578251829060ff16905591602001919060010190611e3d565b50611e69929150611ea8565b5090565b828054828255906000526020600020908101928215611e5d579160200282015b82811115611e5d578251825591602001919060010190611e8d565b5b80821115611e695760008155600101611ea9565b600060208284031215611ecf57600080fd5b5035919050565b80356001600160a01b0381168114611eed57600080fd5b919050565b60008060408385031215611f0557600080fd5b611f0e83611ed6565b946020939093013593505050565b60008060408385031215611f2f57600080fd5b50508035926020909101359150565b600060208284031215611f5057600080fd5b611f5982611ed6565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611fce578351805184526020808201519085015260408082015190850152606080820151908501526080808201519085015260a0908101519084015260c08301938501939250600101611f7c565b50909695505050505050565b600081518084526020808501945080840160005b838110156120135781516001600160a01b031687529582019590820190600101611fee565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156120ec57603f198a85030186528251608081518652898201518a87015288820151818a88015261207c82880182611fda565b606093840151888203898601528051808352908d01948794509250908c01905b808410156120d6578451805183528d8101516001600160a01b03168e8401528c01518c830152938c0193600193909301929082019061209c565b50988b0198965050509288019250600101612046565b50919998505050505050505050565b600081518084526020808501945080840160005b838110156120135781518752958201959082019060010161210f565b602081526000611f5960208301846120fb565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561217d5761217d61213e565b604052919050565b600067ffffffffffffffff82111561219f5761219f61213e565b5060051b60200190565b600082601f8301126121ba57600080fd5b813560206121cf6121ca83612185565b612154565b82815260059290921b840181019181810190868411156121ee57600080fd5b8286015b8481101561220957803583529183019183016121f2565b509695505050505050565b6000806040838503121561222757600080fd5b823567ffffffffffffffff8082111561223f57600080fd5b818501915085601f83011261225357600080fd5b813560206122636121ca83612185565b82815260059290921b8401810191818101908984111561228257600080fd5b948201945b838610156122a75761229886611ed6565b82529482019490820190612287565b965050860135925050808211156122bd57600080fd5b506122ca858286016121a9565b9150509250929050565b600080600080600060a086880312156122ec57600080fd5b6122f586611ed6565b945061230360208701611ed6565b94979496505050506040830135926060810135926080909101359150565b600081518084526020808501945080840160005b83811015612013578151805188526020808201519089015260408082015190890152606080820151908901526080808201519089015260a0908101519088015260c08701965090820190600101612335565b60208152815160208201526020820151604082015260408201516060820152600060608301516101408060808501526123c46101608501836120fb565b91506080850151601f19808685030160a08701526123e28483611fda565b935060a087015160c087015260c08701519150808685030160e08701526124098483612321565b935060e0870151915061010081878603018188015261242885846120fb565b908801516101208881019190915290970151929095019190915250929392505050565b60006020828403121561245d57600080fd5b813567ffffffffffffffff81111561247457600080fd5b612480848285016121a9565b949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156124c7576124c761249e565b500190565b60008160001904831182151516156124e6576124e661249e565b500290565b60006000198214156124ff576124ff61249e565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261252b5761252b612506565b500490565b60208082526017908201527f477565737347616d653a20554e415554484f52495a4544000000000000000000604082015260600190565b6000828210156125795761257961249e565b500390565b60208082526021908201527f477565737347616d653a204e4f545f494e5f534554544c454d454e545f54494d6040820152604560f81b606082015260800190565b6000602082840312156125d157600080fd5b81518015158114611f5957600080fd5b6000602082840312156125f357600080fd5b5051919050565b60208082526023908201527f477565737347616d653a204558434545445f4d41585f5354414b45445f4e554d6040820152622122a960e91b606082015260800190565b60008261264c5761264c612506565b500690565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122053d65762125c6be8e9d51816bef26ad6143075f1e90854641669b3dface22dad64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 182,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 240,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3375,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "factory",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IGuessGameFactory)4791"
      },
      {
        "astId": 3409,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "TOKEN_ADDRESS",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 3412,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "UNDERLYING_TOKEN",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IERC20)1878"
      },
      {
        "astId": 3414,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "START_TIME",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 3416,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "END_TIME",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 3418,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "INTERVAL",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 3420,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "INTERVAL_NUMS",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 3422,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "TOTAL_SHARE",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 3425,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "INTERVAL_WEIGHTS",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3427,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "REWARD_POOL",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 3433,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "userOperationHistory",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_array(t_struct(Operation)3388_storage)dyn_storage)"
      },
      {
        "astId": 3439,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "userNumberStakedAmountMapping",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3445,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "userNumberShareMapping",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3450,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "userChosenNumbers",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3453,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "uniqAddresses",
        "offset": 0,
        "slot": "65",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3456,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "totalBetCount",
        "offset": 0,
        "slot": "66",
        "type": "t_uint256"
      },
      {
        "astId": 3462,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "numberUserShareMapping",
        "offset": 0,
        "slot": "67",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3467,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "numberUsers",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3471,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "userRewardAmount",
        "offset": 0,
        "slot": "69",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3475,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "totalStakedSharePerNumber",
        "offset": 0,
        "slot": "70",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3478,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "stakedNumbers",
        "offset": 0,
        "slot": "71",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3480,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "AVERAGE_NUMBER",
        "offset": 0,
        "slot": "72",
        "type": "t_uint256"
      },
      {
        "astId": 3482,
        "contract": "contracts/GuessGame.sol:GuessGame",
        "label": "FINAL_NUMBER",
        "offset": 0,
        "slot": "73",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Operation)3388_storage)dyn_storage": {
        "base": "t_struct(Operation)3388_storage",
        "encoding": "dynamic_array",
        "label": "struct GuessGame.Operation[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1878": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGuessGameFactory)4791": {
        "encoding": "inplace",
        "label": "contract IGuessGameFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Operation)3388_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GuessGame.Operation[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Operation)3388_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Operation)3388_storage": {
        "encoding": "inplace",
        "label": "struct GuessGame.Operation",
        "members": [
          {
            "astId": 3377,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3379,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3381,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3383,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "shares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3385,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "day",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3387,
            "contract": "contracts/GuessGame.sol:GuessGame",
            "label": "weight",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}